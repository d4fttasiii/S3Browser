@using S3Browser.App.Services
@using Amazon.S3.Model;
@using System.Linq;

@page "/buckets/{bucketName}"
@inject S3BrowserService S3BrowserService

<div class="container-fluid">
    <div class="row">
        <div class="jumbotron jumbotron-sm w-100">
            <h1 class="display-4">S3 Browser</h1>
            <hr />
            <p class="text-muted">List of file from bucket: <b class="text-primary">@BucketName</b></p>
        </div>
    </div>
    <div class="row form-group">
        <div class="input-group">
            <div class="input-group-prepend">
                <a class="btn btn-outline-warning" href="/buckets" role="button"><i class="fas fa-fw fa-arrow-circle-left"></i></a>
            </div>
            <input type="text" class="form-control" placeholder="Search files in bucket by name" bind="@SearchText" />
            <div class="input-group-prepend">
                <button class="btn btn-outline-primary" type="button" onclick="@LoadFilesAsync"><i class="fas fa-fw @(Loaded ? "fa-search" : "fa-circle-notch fa-spin")"></i></button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12 col-md-4">
            <div class="dropdown">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="elementsPerPage" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Displaying elements @ElementsPerPage per page
                </button>
                <div class="dropdown-menu" aria-labelledby="elementsPerPage">
                    @foreach (var option in _elementsPerPageOptions)
                    {
                        <a class="dropdown-item" onclick="@(() => SetElementsPerPage(option))">@option</a>
                    }
                </div>
            </div>
        </div>
        <div class="col-xs-12 col-md-8">
            <nav aria-label="Page navigation example">
                <ul class="pagination">
                    <li class="page-item"><button class="page-link" onclick="@(() => GoToPage(Page - 1))"><i class="fas fa-fw fa-chevron-left"></i></button></li>
                    <li class="page-item"><button class="page-link" onclick="@(() => GoToPage(Page))">@(Page + 1)</button></li>
                    <li class="page-item"><button class="page-link" onclick="@(() => GoToPage(Page + 1))">@(Page + 2)</button></li>
                    <li class="page-item"><button class="page-link" onclick="@(() => GoToPage(Page + 2))">@(Page + 3)</button></li>
                    <li class="page-item"><button class="page-link" onclick="@(() => GoToPage(Page + 1))"><i class="fas fa-fw fa-chevron-right"></i></button></li>
                </ul>
            </nav>
        </div>
    </div>
    <hr />
    <div class="row">
        @if (Loaded)
        {
            <ul class="list-group w-100">
                @foreach (var file in files)
                {
                    <li class="list-group-item list-group-item-action flex-column align-items-start animated fadeInDown">
                        <div class="d-flex w-100 justify-content-between">
                            <h6 class="mb-1"><i class="fas fa-fw fa-file mr-1"></i> @file.Key</h6>
                            <small>@file.LastModified</small>
                        </div>
                        <div class="text-right mt-2">
                            <div class="btn-group btn-group-sm">
                                <button type="button" class="btn btn-outline-primary" onclick="@(() => DownloadFileAsync(file.Key))">
                                    <i class="fas fa-fw fa-download"></i>
                                </button>
                                <button type="button" class="btn btn-outline-danger" onclick="@(() => DeleteFileAsync(file.Key))">
                                    <i class="fas fa-fw fa-trash-alt"></i>
                                </button>
                            </div>
                        </div>
                    </li>
                }
            </ul>
        }
    </div>
</div>


@functions {

    private readonly int[] _elementsPerPageOptions = new[] { 5, 10, 25, 50, 100 };

    [Parameter]
    private string BucketName { get; set; }
    private string SearchText { get; set; } = "";
    private bool Loaded { get; set; } = false;
    private int ElementsPerPage { get; set; } = 5;
    private int Page { get; set; } = 0;

    List<S3Object> files = new List<S3Object>();

    protected override async Task OnInitAsync()
    {
        await LoadFilesAsync();
    }

    private async Task LoadFilesAsync()
    {
        Loaded = false;
        files = (await S3BrowserService.GetFileListAsync(BucketName, SearchText, ElementsPerPage, Page * ElementsPerPage)).ToList();
        Loaded = true;
    }

    private async Task DownloadFileAsync(string key)
    {
        var bytes = await S3BrowserService.GetContentBytesAsync(BucketName, key);
        var fileName = key.Split('/').Last();
        await JSRuntime.Current.InvokeAsync<string>("downloadFile", fileName, bytes);
    }

    private async Task DeleteFileAsync(string key)
    {
        var fileToRemove = files.First(f => f.Key == key);
        files.Remove(fileToRemove);
        await S3BrowserService.DeleteFileAsync(BucketName, key);
    }

    private async Task SetElementsPerPage(int elementsPerPage)
    {
        ElementsPerPage = elementsPerPage;
        await LoadFilesAsync();
    }

    private async Task GoToPage(int page)
    {
        Page = page;
        await LoadFilesAsync();
    }
}